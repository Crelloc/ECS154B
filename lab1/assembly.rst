
Reading Assembly Code
---------------------

Below are a set of function in MIPS assembly (the language covered in your book), ARM assembly and x86 assembly.
You should upload a file "assembly.pdf" which contains the answers to the following questions.

You can find more information on MIPS assembly, and assembly in general in Chapter 2 of your book and this `MIPS Green Sheet`_.
You can find more information on x86 assembly with this `Cheat Sheet`_.
You can find more information on ARM assembly with this not so short `ARM reference`_.
Of course, you can Google for any of the instructions and the first hit will likely explain it.
Finally, you can also use Piazza_ to leverage the knowledge of your classmates.

.. _MIPS Green Sheet: http://booksite.elsevier.com/9780124077263/downloads/COD_5e_Greencard.pdf

.. _Cheat Sheet: http://pages.cs.wisc.edu/~powerjg/cs354-fall15/Handouts/Handout-x86-cheat-sheet.pdf

.. _ARM reference: http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001m/QRC0001_UAL.pdf

.. _Piazza: https://piazza.com/class/jc0wjo8xjr77

For each question, assume execution begins at the beginning of the function and nothing has executed before.
Additionally, these functions do not contain all of the necessary calling conventions for their respective assembly languages.
All of the code was generated by compiling a C function and dumping the resulting object file.
This is similar to how you will likely have to interact with assembly language in the "real world".

#. In the MIPS code below, what is the value of register ``$2`` after ``f1()`` completes?
#. In the MIPS code below, what is the value of register ``$2`` after ``f2()`` completes?
#. In the MIPS code below, what is the value of register ``$2`` after ``f3()`` completes?
#. In the MIPS code below, what is the value of register ``$2`` after ``f4()`` completes?
#. In the MIPS code below, what is the value of register ``$2`` after ``f5()`` completes?

#. The ARM assembly function (``function()``) below is *exactly* the same as one of the MIPS functions. Which is it?

#. In the x86 code below, which is value of register ``%eax`` after ``f1()``? (Hint, this function is similar, but not the same to a MIPS function).
#. In the x86 code below, which is value of register ``%eax`` after ``f2()``? (Hint, this function is similar, but not the same to a MIPS function).



MIPS Assembly
-------------

.. code-block:: asm

    f1():
        la $3,X
        lw $4,0($3)
        lw $2,4($3)
        j $31
        addu $2,$4,$2

    f2():
        la $2,X
        lw $2,12($2)
        sll $3,$2,2
        la $2,Y
        addu $2,$2,$3
        lw $2,0($2)
        j $31

    f3():
        la $2,Z
        lw $2,0($2)
        sll $2,$2,2
        la $4,Y
        addu $4,$4,$2
        la $3,X
        addu $2,$3,$2
        lw $3,0($4)
        lw $2,0($2)
        slt $2,$3,$2
        bne $2,$0,$L7
        j $31
        li $2,15 # 0xf
        j $31
        li $2,7 # 0x7

    f4():
        la $2,Z
        lw $3,0($2)
        blez $3,$L12
        sll $3,$3,2
        la $5,X
        addu $3,$5,$3
        move $2,$0
        lw $4,0($3)
        addiu $3,$3,-4
        bne $3,$5,$L11
        addu $2,$2,$4
        la $3,Z
        j $31
        sw $0,0($3)
        j $31
        move $2,$0

    f5():
        addiu $sp,$sp,-32
        sw $31,28($sp)
        la $2,Y
        li $3,20 # 0x14
        sw $3,0($2)
        li $3,19 # 0x13
        sw $3,4($2)
        li $3,18 # 0x12
        sw $3,8($2)
        li $3,17 # 0x11
        sw $3,12($2)
        li $3,16 # 0x10
        sw $3,16($2)
        jal f2()
        lw $31,28($sp)
        j $31
        addiu $sp,$sp,32

    Z:
        .word 4
    Y:
        .word 6
        .word 7
        .word 8
        .word 9
        .word 10
    X:
        .word 1
        .word 2
        .word 3
        .word 4
        .word 5


ARM Assembly
------------

.. code-block:: asm

    function():
        ldr r3, .L17
        ldr r3, [r3, #40]
        cmp r3, #0
        ble .L15
        ldr r1, .L17
        add r3, r1, r3, lsl #2
        mov r0, #0
    .L14:
        ldr r2, [r3], #-4
        add r0, r0, r2
        cmp r3, r1
        bne .L14
        mov r2, #0
        ldr r3, .L17
        str r2, [r3, #40]
        bx lr
    .L15:
        mov r0, #0
        bx lr

    .L17:
        .word .LANCHOR0

    X:
        .word 1
        .word 2
        .word 3
        .word 4
        .word 5
    Y:
        .word 6
        .word 7
        .word 8
        .word 9
        .word 10
    Z:
        .word 4


x86 Assembly
------------

.. code-block:: asm

    f1():
        movl Z, %eax
        leal 1(%eax), %edx
        movl Y+8(,%eax,4), %eax
        cmpl X(,%edx,4), %eax
        setge %al
        movzbl %al, %eax
        leal 7(,%eax,8), %eax
        ret

    f2():
        movl $20, Y
        movl $19, Y+4
        movl $18, Y+8
        movl $17, Y+12
        movl $16, Y+16
        call f3()
        rep ret

    f3():
        movl X+4, %eax
        movl Y(,%eax,4), %eax
        ret

    Z:
       .long 4
    Y:
       .long 6
       .long 7
       .long 8
       .long 9
       .long 10
    X:
       .long 1
       .long 2
       .long 3
       .long 4
       .long 5
